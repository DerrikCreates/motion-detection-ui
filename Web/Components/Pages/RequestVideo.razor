@page "/RequestVideo"
@using System.Globalization
@using System.Web
@rendermode InteractiveServer

<p>@start</p>
<p>@src</p>
@* <iframe src="@src" width="640" height="360" frameborder="0" allow="autoplay; fullscreen"></iframe> *@


<p> Total Process Time: @TotalProcessTime</p>
<button @onclick="ForceRefresh">Force refresh</button>
<div class="d-flex flex-row m-5">

    @foreach (var feedback in VideoProcessing.Feedback)
    {
        <div class="card" style="width: 18rem;">
            <img src="@GetImageSrc(feedback.Value.DebugImage)" class="card-img-top" alt="...">
            <div class="card-body">
                <h5 class="card-title">@feedback.Key</h5>
                <p class="card-text">Process Time : </p>
                @* <a href="#" class="btn btn-primary">Go somewhere</a> *@
                <p class="card-text">ProcessTime: @feedback.Value.FrameProcessTime</p>
                <p class="card-text">Mean: @feedback.Value.Mean</p>
                <p class="card-text">Time: @feedback.Value.Time</p>
                <p class="card-text">Time Diff @(DateTime.UtcNow - feedback.Value.Time) </p></div>
        </div>
    }
</div>

@code
{
    private string GetImageSrc(byte[] bytes)
    {
        var base64 = Convert.ToBase64String(bytes);
        return $"data:image/jpeg;base64,{base64}";
    }


    [Parameter, SupplyParameterFromQuery] public int? StartTime { get; set; }

    string src;
    string start;

    int TotalProcessTime = 0;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Console.WriteLine(StartTime);

        var dto = DateTimeOffset.Now - TimeSpan.FromSeconds(60);

        start = HttpUtility.UrlEncode(dto.ToString("yyyy-MM-dd'T'HH:mm:ss.fffK", CultureInfo.InvariantCulture));
        src = $"http://localhost:9996/get?path=test&start={start}&duration=30";
    }

    private void ForceRefresh()
    {
        Console.WriteLine("Force refresh test");
        TotalProcessTime = 0;
        StateHasChanged();
    }
}
